<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Androidgrl's Blog</title>
 <link href="http://androidgrl.github.io/atom.xml" rel="self"/>
 <link href="http://androidgrl.github.io/"/>
 <updated>2019-01-01T18:03:01-08:00</updated>
 <id>http://androidgrl.github.io</id>
 <author>
   <name>Jamie Kawahara</name>
   <email>kawaharajamie@gmail.com</email>
 </author>

 
 <entry>
   <title>How Does a Computer Physically Store Binary Code?</title>
   <link href="http://androidgrl.github.io/2019/01/01/binary/"/>
   <updated>2019-01-01T00:00:00-08:00</updated>
   <id>http://androidgrl.github.io/2019/01/01/binary</id>
   <content type="html">&lt;p&gt;Most software engineers know that a computer stores data as binary code, and that binary code consists of 0’s and 1’s.  However, the 0’s and 1’s themselves are just abstract symbols that represent real physical states within a computer.  In this blog, I will give an overview of these physical states.&lt;/p&gt;

&lt;p&gt;Before proceeding I would like to give a brief overview of the mechanisms by which computers store data.  Computers use two main mechanisms to store data: memory and storage.  Memory is used to temporarily store data that the computer uses while it is actively processing things.  Memory is considered “volatile” in that it disappears when the computer is powered-off.  Memory is what is commonly referred to when people say “RAM”.&lt;/p&gt;

&lt;p&gt;Storage on the other hand is what the computer uses to store long term data like photos, music, and documents.  Unlike memory, storage is “non-volatile” and remains after the computer is powered-off.  Therefore things like music and documents do not disappear when you power-off your computer.  Historically a computer’s storage device has been a hard disk drive or “HDD”.  Most computers nowadays however use a solid state drive or “SSD”.&lt;/p&gt;

&lt;p&gt;So, we have our three main mechanisms for data storage: “RAM”, “HDD”, and “SSD” and we will now examine how they store binary data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RAM&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A RAM memory chip stores binary data through billions of tiny capacitors.  Each capacitor is like a microscopic bucket that holds electrons.  When a capacitor is charged, it’s bucket is filled with electrons.  When it is not charged, the bucket is empty.  Whether or not a capacitor is full or empty determines whether it represents a “0” or “1”.  A charged state is considered a “1”, and an un-charged state is considered a “0”.  Since each “0” or “1” is considered a “bit” of data, and there are 8 bits in a “byte”, and a typical computer can have 8 gigabytes of memory, then there can be approximately 8X8e+9 or (64 billion) RAM memory cells in a computer!  See photo below showing microscopic RAM capacitors.  For a sense of scale, the width of the photo is approximately 1/300th the width of a human hair.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./public/dramcapacitor.png&quot; alt=&quot;dram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As an aside, RAM capacitors are like leaky buckets which continuously leak out the electrons they’re holding.  Therefore, when the computer is powered-on there is a constant refilling of the buckets that happens multiple times per second.  When the computer is powered-off the buckets drain-out which is why RAM memory is not retained after powering-off.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HDD&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A hard disk drive stores binary data through tiny microscopic magnetic lines drawn on a metal disk.  A hard disk drive is composed of a spinning metal disk called a “platter” which is coated with a magnetic material.  It has a read/write head that has a powerful electromagnet on its tip that is capable of drawing tiny magnetically charged lines on the surface of the platter.  See photo below of a typical hard disk drive.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./public/hardisk.jpg&quot; alt=&quot;harddrive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If a line is magnetically attractive it is considered a “0”, if it is magnetically repulsive it is considered a “1”.  See photo below for a color rendered image showing the magnetic lines on an HDD platter.  The width of the photo is about 1/10 the width of a human hair.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./public/magnetic.png&quot; alt=&quot;magnetic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A common misconception is that household magnets placed near an HDD can cause memory loss through disrupting the magnetic line patterns.  This is false since most household magnets are not powerful enough to do this.  However, very powerful magnets called “degaussers” are made and used specifically for erasing hard disks by randomizing or scrambling the line patterns.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SDD&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A solid state drive stores binary data through billions of tiny transistors.  Each transistor can either exist in a charged or un-charged state.  A charged state is considered a “0”, and an un-charged state a “1”.  Unlike RAM capacitors, SSD transistors are designed to hold their charge after the computer is powered-off.  Therefore, data is not lost after powering-off.  Below is a cross section of three “memory cell” transistors. The one in the center has a charged state and is considered a “0”, while the one to the right has an un-charged state and is considered a “1”.  The width of the photo is approximately 1/300th the width of a human hair.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./public/ssd.png&quot; alt=&quot;ssd&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In summary, the 0’s and 1’s of binary code are abstract symbols which represent real physical states within a computer.  For RAM it is the electric charge inside tiny capacitors, for HDD’s it is the magnetic charge of tiny lines, for SSD’s it is the electric charge inside tiny transistors.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Determining the Scope of What to Test Inside Methods</title>
   <link href="http://androidgrl.github.io/2017/04/14/testing/"/>
   <updated>2017-04-14T00:00:00-07:00</updated>
   <id>http://androidgrl.github.io/2017/04/14/testing</id>
   <content type="html">&lt;p&gt;Sometimes it can be difficult to determine what you want to test inside a method, especially if that method calls other methods, which in turn call other methods and so on.  For example, take the example class &lt;strong&gt;Cake&lt;/strong&gt; below.  It has a method called &lt;strong&gt;make&lt;/strong&gt; which calls two methods &lt;strong&gt;mix_ingredients&lt;/strong&gt; and &lt;strong&gt;bake&lt;/strong&gt;, which in turn call &lt;strong&gt;Foo.mix&lt;/strong&gt; and &lt;strong&gt;Foo.bake&lt;/strong&gt; respectively.&lt;/p&gt;

&lt;p&gt;```
class Cake
  def make
    mix_ingredients
    bake
  end&lt;/p&gt;

&lt;p&gt;def mix_ingredients
    Foo.mix
  end&lt;/p&gt;

&lt;p&gt;private&lt;/p&gt;

&lt;p&gt;def bake
    Foo.bake
  end
end&lt;/p&gt;

&lt;p&gt;class Foo
  def self.mix
  end&lt;/p&gt;

&lt;p&gt;def self.bake
  end
end
```&lt;/p&gt;

&lt;p&gt;If we were to write a test for &lt;strong&gt;make&lt;/strong&gt;, certainly we would want to test that &lt;strong&gt;mix_ingredients&lt;/strong&gt; and &lt;strong&gt;bake&lt;/strong&gt; get called.&lt;/p&gt;

&lt;p&gt;```
describe Cake do
  describe ‘#make’ do
    it ‘calls mix_ingredients and bake’ do
      expect_any_instance_of(described_class).to receive(:mix_ingredients)
      expect_any_instance_of(described_class).to receive(:bake)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  described_class.new.make
end   end end ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However since &lt;strong&gt;mix_ingredients&lt;/strong&gt; calls &lt;strong&gt;Foo.mix&lt;/strong&gt; and &lt;strong&gt;bake&lt;/strong&gt; calls &lt;strong&gt;Foo.bake&lt;/strong&gt; would we also want to test that those get called in our test for &lt;strong&gt;make&lt;/strong&gt;?  The answer is it depends on whether these get called inside public or private methods.&lt;/p&gt;

&lt;p&gt;Taking a look at &lt;strong&gt;mix_ingredients&lt;/strong&gt; we see that it’s a public method.  Since all public methods should be tested, we know that we will have a separate test for it and it will check if &lt;strong&gt;Foo.mix&lt;/strong&gt; is called.  Here is our updated test file with the test for &lt;strong&gt;mix_ingredients&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;
describe Cake do
  describe &#39;#make&#39; do
    it &#39;calls mix_ingredients and bake&#39; do
      expect_any_instance_of(described_class).to receive(:mix_ingredients)
      expect_any_instance_of(described_class).to receive(:bake)

      described_class.new.make
    end
  end
  &lt;b&gt;
  describe &#39;#mix_ingredients&#39; do
    it &#39;calls mix on Foo&#39; do
      expect(Foo).to receive(:mix)

      described_class.new.mix_ingredients
    end
  end &lt;/b&gt;
end
&lt;/pre&gt;

&lt;p&gt;But what about &lt;strong&gt;bake&lt;/strong&gt;?  Since we don’t test private methods we won’t have a test for this.  However, we still want to test that it calls &lt;strong&gt;Foo.bake&lt;/strong&gt;.  Since &lt;strong&gt;bake&lt;/strong&gt; gets called when &lt;strong&gt;make&lt;/strong&gt; gets called, we need to add a test for this in our &lt;strong&gt;make&lt;/strong&gt; test.&lt;/p&gt;

&lt;pre&gt;
describe Cake do
  describe &#39;#make&#39; do
    it &#39;calls mix_ingredients and bake&#39; do
      expect_any_instance_of(described_class).to receive(:mix_ingredients)
      expect_any_instance_of(described_class).to receive(:bake)

      described_class.new.make
    end
  &lt;b&gt;
    it &#39;calls bake on Foo&#39; do
      expect(Foo).to receive(:bake)

      described_class.new.make
    end
  end
  &lt;/b&gt;

  describe &#39;#mix_ingredients&#39; do
    it &#39;calls mix on Foo&#39; do
      expect(Foo).to receive(:mix)

      described_class.new.mix_ingredients
    end
  end
end
&lt;/pre&gt;

&lt;p&gt;In summary, determining the scope of what to test inside of a method that calls other methods, depends on whether public or private methods get called within it.  If a public method is called, then it will have it’s own test and you only need to test that this public method gets called.  If a private method is called, then it won’t have it’s own test, so you’ll need to test what’s happening inside the private method.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>What Makes a Language Fast?  Five Factors That Affect a Programming Language's Speed</title>
   <link href="http://androidgrl.github.io/2017/02/17/languages/"/>
   <updated>2017-02-17T00:00:00-08:00</updated>
   <id>http://androidgrl.github.io/2017/02/17/languages</id>
   <content type="html">&lt;p&gt;Often I have heard that Ruby is a slow language compared to other languages like Go and Elixir.  I have also heard of startups that originally build their apps on Rails but after hitting it big need to switch to a language like Java in order to scale up.  What are the factors that determine whether a language is considered fast?  How do companies choose which language is most appropriate for their application?  This blog will cover these five factors, a brief overview of how a language is run on your computer processor, and some considerations that go into deciding what is an optimal language for a particular end use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Five Main Factors&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Asynchronous&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A language that can be asynchronous can be much faster than a synchronous one.  Let’s say that I want to bake a cake and wash the dishes.  If I put the cake in the oven, wait for it to bake, then wash the dishes, that is synchronous.  There is a little time lost waiting for the cake to bake and doing nothing.  This is how Ruby works, it waits for something to be completely done before starting something else.  Now let’s say that I put the cake in the oven, and while it bakes I do the dishes thereby cutting the overall time to do both tasks.  That is asynchronous.&lt;/p&gt;

&lt;p&gt;Javascript is a language that is good at asynch.  One example of how Javascript uses asynch is when a number of api calls are made to a backend to get a bundle of information.  Instead of waiting for each call to get it’s response before making the next one, it can make other calls while it is waiting for previous ones.  If all the calls are necessary to perform an action, then a “promise” can be made which means it will wait for all the calls to complete before performing the action.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Multithreaded&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s say that I decided to ask my friend to wash the dishes while I baked a cake.  That is multithreading.  I doubled the working power by asking my friend to help.  Likewise multithreaded languages can spin up multiple “threads” to perform multiple tasks at once.&lt;/p&gt;

&lt;p&gt;Java and Elixir are capable of multithreading while Ruby and Javascript are not.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Static Typed&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A statically typed language is one in which you have to define what data type a variable is.  For example in Java, if you set a variable to be an array, you have to specify that it is an array.  Ruby on the other hand is dynamically typed.  You don’t have to specify that a variable is any particular data structure, and you can even change what it is at any time.  Although a dynamically typed language can be great for building something quickly, it runs slower than a statically typed language.  This is because a statically typed language knows exactly how much memory to allocate to a variable because it knows exactly what kind of data type it is.  A dynamically typed language on the other hand must allocate a greater amount of memory to store a variable because it doesn’t know what it will be.  Less memory usage results in greater speed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Functional&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A functional language is the opposite of an object-oriented language.  Elixir is a functional language, in which everything is based on functions not objects.  Ruby is an object-oriented language because everything in Ruby including simple things like numbers and strings are objects.  Objects take up a lot of memory and therefore an object-oriented language will be slower.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Compiled&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All languages at the end of the day need to be translated into byte code for your computer’s processor.  Some languages like Java and Elixir pre-compile themselves into an intermediate form of byte code that is one step closer to processor byte code.  This extra step makes it easier for the language to be translated into processor byte code, resulting in a faster language.  A language such as Ruby or Python are not compiled but are “interpreted”.  Interpreted just means that it does not go though the pre-compiling step, and has to be directly interpreted into processor byte code which requires more work and is therefore slower.  Still faster yet is C which can compile directly into processor byte code skipping the intermediate step.  A language that is directly compiled into processor byte code is called a “natively compiled” language.&lt;/p&gt;

&lt;p&gt;Here is a chart summarizing four popular languages and their characteristics:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./public/chart.png&quot; alt=&quot;Chart&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lastly, how do you choose which language is good for your app?  When choosing a language it is important to consider what the app is being used for.  For example, math computations are run on the computer’s processor.  Therefore apps that do a lot of math computations will run faster with a natively compiled language because it won’t be slowed down by pre-compiling or interpretation.  Apps that have a relatively few numbers of users but need to wait for multiple api calls to perform a function, would benefit from an asynchronous language.  Apps that have millions of users trying to request a webpage all at once will benefit from a multi-threaded language.  An app that is for a startup which doesn’t have a lot of users yet and needs to be built quickly would do well with Ruby.&lt;/p&gt;

&lt;p&gt;In summary the five characteristics that can increase the speed of a language are: Asynchronious, Multi-Threaded, Statically-typed, Functional, and Compiled.  When choosing a language it is good to consider what the app is being used for.&lt;/p&gt;

&lt;p&gt;A special thanks to Alex Jensen and Adam Zaninovich for their help in explaining these concepts to me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Namespace Resolution Operator, aka the "double colon operator"</title>
   <link href="http://androidgrl.github.io/2017/01/28/namespace/"/>
   <updated>2017-01-28T00:00:00-08:00</updated>
   <id>http://androidgrl.github.io/2017/01/28/namespace</id>
   <content type="html">&lt;p&gt;At work I saw an interesting version of the namespace resolution operator, aka the double colon operator.  Previously I had only seen it used to gain access inside scoped modules.  Such as gaining access to the ID defined inside module B below:&lt;/p&gt;

&lt;p&gt;```
module A
  module B
    ID = 3
  end
end&lt;/p&gt;

&lt;p&gt;puts A::B::ID
» 3
```&lt;/p&gt;

&lt;p&gt;But this time it was used at the beginning of a scoped chain of modules like inside module B below:&lt;/p&gt;

&lt;p&gt;```
module C
  ID = 3
end&lt;/p&gt;

&lt;p&gt;module A
  module C
  ID = 4
    module B
      ID = ::C::ID
    end
  end
end&lt;/p&gt;

&lt;p&gt;puts A::C::B::ID
» 3
```&lt;/p&gt;

&lt;p&gt;This is called the root namespace resolution operator and it specifies that you are looking for a root level module.  A root level module is one that is not scoped inside another module.  So in this case, it is the module C defined on top which has the ID of 3.&lt;/p&gt;

&lt;p&gt;Why was this needed?  It was needed so that it wouldn’t find the scoped module A::C’s ID instead.  For example if we removed the root operator like below, it would return 4 instead of 3.&lt;/p&gt;

&lt;p&gt;```
module C
  ID = 3
end&lt;/p&gt;

&lt;p&gt;module A
  module C
  ID = 4
    module B
      ID = C::ID
    end
  end
end&lt;/p&gt;

&lt;p&gt;puts A::C::B::ID
» 4
```&lt;/p&gt;

&lt;p&gt;In fact, if we did not have the ID = 4 defined inside the scoped module C, it would error out and never find the root level module C ID, like below.&lt;/p&gt;

&lt;p&gt;```
module C
  ID = 3
end&lt;/p&gt;

&lt;p&gt;module A
  module C
    module B
      ID = C::ID
    end
  end
end&lt;/p&gt;

&lt;p&gt;puts A::C::B::ID
» error
```&lt;/p&gt;

&lt;p&gt;Why does the scoped A::C take precedence over the root level C in the above case?
Because when you call C::ID inside of module B, it starts from where it is inside the scope and moves outward through it’s surrounding modules.  It then finds the outer module A::C and looks for an ID there.  Because it found a module C, it stops there and does not continue even though it has no ID defined, and does not continue to look for the root module C.&lt;/p&gt;

&lt;p&gt;Also it is important to note that when two modules have the same name but are scoped differently they are completely different modules.  In fact they might as well have different names.  For example below:&lt;/p&gt;

&lt;p&gt;```
module C
  ID = 1
end&lt;/p&gt;

&lt;p&gt;module A
  module C
    ID = 2
  end
end&lt;/p&gt;

&lt;p&gt;puts C::ID
» 1
puts A::C::ID
» 2
```&lt;/p&gt;

&lt;p&gt;This is not to be confused with monkey patching a module, for example the code below first defines a root level module C with a constant of ONE, then it monkey patches the same root level module to add another constant TWO.  You can monkey patch a module or class as many times as you want, Ruby doesn’t care.&lt;/p&gt;

&lt;p&gt;```
module C
  ONE = 1
end&lt;/p&gt;

&lt;p&gt;module C
  TWO = 2
end&lt;/p&gt;

&lt;p&gt;puts C::ONE
» 1
puts C::TWO
» 2
```&lt;/p&gt;

&lt;p&gt;However, if you tried to monkey patch into a module with the same name but on a different scoped level it would not work because they’re two entirely different modules.&lt;/p&gt;

&lt;p&gt;```
module C
  ONE = 1
end&lt;/p&gt;

&lt;p&gt;module A
  module C
    TWO = 2
  end
end&lt;/p&gt;

&lt;p&gt;puts C::TWO
» error
```&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The difference between using include and extend when including modules in a Class</title>
   <link href="http://androidgrl.github.io/2017/01/19/modules/"/>
   <updated>2017-01-19T00:00:00-08:00</updated>
   <id>http://androidgrl.github.io/2017/01/19/modules</id>
   <content type="html">&lt;p&gt;We’ve seen the use of include for including methods from a module into a Class.
The following shows three modules included into Class A:&lt;/p&gt;

&lt;p&gt;```
module B
  def b
    :b
  end
end&lt;/p&gt;

&lt;p&gt;module C
  def c
    :c
  end
end&lt;/p&gt;

&lt;p&gt;module D
  def d
    :d
  end
end&lt;/p&gt;

&lt;p&gt;class A
  include B
  include C
  include D
end
```&lt;/p&gt;

&lt;p&gt;Include turns the methods inside the module into &lt;em&gt;instance&lt;/em&gt; methods for that class:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
puts A.new.b &amp;gt;&amp;gt; b
puts A.new.c &amp;gt;&amp;gt; c
puts A.new.d &amp;gt;&amp;gt; d
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However you can also change the methods into &lt;em&gt;class&lt;/em&gt; methods by using extend:&lt;/p&gt;

&lt;p&gt;```
module B
  def b
    :b
  end
end&lt;/p&gt;

&lt;p&gt;module C
  def c
    :c
  end
end&lt;/p&gt;

&lt;p&gt;module D
  def d
    :d
  end
end&lt;/p&gt;

&lt;p&gt;class A
  extend B
  extend C
  extend D
end&lt;/p&gt;

&lt;p&gt;puts A.b » b
puts A.c » c
puts A.d » d
```&lt;/p&gt;

&lt;p&gt;Notice how we didn’t have to change the method definitions inside the module to self.method.
This is because modules have no sense of Class, they’re just buckets for methods.  They are called
‘mixins’ because they mix methods into wherever they are included or extended into.&lt;/p&gt;

&lt;p&gt;Our team architect Adam Zaninovich gives the analogy of modules being ‘viruses’ and classes being ‘hosts’.  Modules ‘infect’
classes with their ‘methods’ (in a good way in this case), in the sense that viruses inject their dna into host cells.&lt;/p&gt;

&lt;p&gt;I wrote include in class A three times which is repetitive.  If you find that you are
including modules in a class many times you can avoid this by using the self.included module method.&lt;/p&gt;

&lt;p&gt;```
module B
  def self.included(klass)
    klass.include C
    klass.include D
  end&lt;/p&gt;

&lt;p&gt;def b
    :b
  end
end&lt;/p&gt;

&lt;p&gt;module C
  def c
    :c
  end
end&lt;/p&gt;

&lt;p&gt;module D
  def d
    :d
  end
end&lt;/p&gt;

&lt;p&gt;class A
  include B
end&lt;/p&gt;

&lt;p&gt;puts A.new.b » b
puts A.new.c » c
puts A.new.d » d
```&lt;/p&gt;

&lt;p&gt;Now there is only ‘include B’ inside class A.  Whenever B is included in a Class, it calls self.included
which passes in the class A as an argument.  “self.included” then included modules C and D into the klass
passed as the argument which in our case is class A.&lt;/p&gt;

&lt;p&gt;Also, the self.included method comes in handy when you want your module to have BOTH instance and class methods.
The following module C demonstrates the conventional way to specify both instance and class methods inside a module.&lt;/p&gt;

&lt;p&gt;```
module C
  def self.included(base)
    base.extend(ClassMethods)
  end&lt;/p&gt;

&lt;p&gt;def c
    :c
  end&lt;/p&gt;

&lt;p&gt;module ClassMethods
    def b
      :b
    end
  end
end&lt;/p&gt;

&lt;p&gt;class A
  include C
end&lt;/p&gt;

&lt;p&gt;puts A.new.c » c
puts A.b » b
```&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Alternatives to Using the Try method</title>
   <link href="http://androidgrl.github.io/2017/01/14/try/"/>
   <updated>2017-01-14T00:00:00-08:00</updated>
   <id>http://androidgrl.github.io/2017/01/14/try</id>
   <content type="html">&lt;p&gt;At my work we have a North America team and a China team.  Part of our workflow is to review each others merge requests before merging.  As a junior developer I often see things that I have never seen before and must make an educated decision about whether the unfamiliar pattern is a genuine coding error or deviation from best practices, or just something new I don’t know about.  And because the person who wrote the code is in China in an opposite time zone, it’s not easy to ask them directly about it.  So, while reviewing an MR I saw a use of the try method that I had never seen before.  Here is a simplified version:&lt;/p&gt;

&lt;p&gt;```
class Order
  def grand_total
    sub_total.try(:*, sales_tax)
  end&lt;/p&gt;

&lt;p&gt;def sub_total
    FooBar.baz
  end
end
```&lt;/p&gt;

&lt;p&gt;Here the asterisk is the multiplication operator.  Try is trying to multiply sub_total by sales_tax.  If sub_total is nil, it will return nil, instead of erroring out as would happen when trying to multiply nil by a number.&lt;/p&gt;

&lt;p&gt;This seemed harmless enough but when I showed it to the team architect in North America he said that using try is like introducing cancer into the code base.  I believe his exact words were “OMG make it stop that try needs to die with fire”.  It seems harmless but then other people see it and start to use it and if allowed to continue can introduce a lot of uncertainty into the code.  It is better to know what kind of result your methods are returning.  We then had a pairing session to use alternative ways to handle nil cases without using try, and here are two of the alternatives we used:&lt;/p&gt;

&lt;p&gt;The first alternative is to use an if statement.&lt;/p&gt;

&lt;p&gt;```
class Order
  def grand_total
    if subtotal
      (sub_total * sales_tax)
    else
      nil
    end
  end&lt;/p&gt;

&lt;p&gt;def sub_total
    FooBar.baz
  end
end
```&lt;/p&gt;

&lt;p&gt;If there’s a subtotal it will perform the multiplication, if there is not it will return nil.  Since by default nil is what is returned by else, you can take out the else and make the statement one line.&lt;/p&gt;

&lt;p&gt;```
class Order
  def grand_total
    (sub_total * sales_tax) if sub_total
  end&lt;/p&gt;

&lt;p&gt;def sub_total
    FooBar.baz
  end
end
```&lt;/p&gt;

&lt;p&gt;What if we wanted to return 0 instead of nil if there was no sub_total?  We could go back to the if else statement but sometimes it can be better to use a Null Object pattern, which is the second alternative.&lt;/p&gt;

&lt;p&gt;```
class Order
  def grand_total
    sub_total * sales_tax
  end&lt;/p&gt;

&lt;p&gt;def sub_total
    result = FooBar.baz
    if result
      result
    else
      NullOrder.new.sub_total
    end
  end
end&lt;/p&gt;

&lt;p&gt;class NullOrder
  def sub_total
    0
  end
end
```&lt;/p&gt;

&lt;p&gt;Going into the sub_total method, if we get a result from FooBar.baz we return it, if it is nil then we return an instance of NullOrder which has a sub_total of 0.&lt;/p&gt;

&lt;p&gt;We then no longer have to have branching inside the grand_total method.  It will either be the actual sub_total or the sub_total on the NullOrder which is 0.&lt;/p&gt;

&lt;p&gt;This is an example of Duck Typing.  Duck Typing is when we don’t care what type of object we’re dealing with only that it has certain behavior.  In this case  we just care that Order and NullOrder both have a sub_total method.&lt;/p&gt;

&lt;p&gt;In order to prevent an error in case someone tries to call an undefined method on the NullOrder, we can override the method_missing method to return whatever we want.  For example:&lt;/p&gt;

&lt;p&gt;```
class NullOrder
  def method_missing(*_args)
    nil
  end&lt;/p&gt;

&lt;p&gt;def sub_total
    0
  end
end
```&lt;/p&gt;

&lt;p&gt;If someone were to call NullOrder.new.whatever, the method_missing method gets called which by default will raise an error.  Instead we override it to return nil.  We add a splat argument in case someone calls an undefined method on it that has arguments.  The underscore in  front of “args” denotes that it’s something that’s not supposed to be used.&lt;/p&gt;

&lt;p&gt;In summary, the try method introduces uncertainty into the code because it makes it ok to not know what is being returned by a method.  Alternatives to using try are using if statements and the Null Object pattern.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Law of Demeter</title>
   <link href="http://androidgrl.github.io/2017/01/04/demeter/"/>
   <updated>2017-01-04T00:00:00-08:00</updated>
   <id>http://androidgrl.github.io/2017/01/04/demeter</id>
   <content type="html">&lt;p&gt;A few times I’ve been told during code review that something violates the Law of Demeter.  This method for example.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
class User
  def user_info
    &quot;#{user.name}, #{user.department.name}&quot;
  end
end
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Which led me to ask: what is the Law of Demeter, why should I follow it, how do I know if I’m violating it, and how do I avoid violating it?&lt;/p&gt;

&lt;p&gt;The Law of Demeter is formally defined as,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
A method of an object may only call methods of:
  The object itself.
  An argument of the method.
  Any object created within the method.
  Any direct properties/fields of the object.
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The above code sample violates the law with “user.department.name” because it’s calling name on the user’s department, and department is an entirely different object from a user.&lt;/p&gt;

&lt;p&gt;In general it is better if one class does not have to know about methods from another class, in other words when the classes are “decoupled”.  This is because it makes the code more flexible.  For example in our code sample, there is only one department for a user.  But what happens if things changed so that a user could have many departments and we wanted the only use the first one for our user_info method?  We would then have to say:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
class User
  def user_info
    &quot;#{user.name}, #{user.departments.first.name}&quot;
  end
end
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This seems reasonable for now but what if we used “user.department” in multiple places?  We’d have to make the same change wherever it was used, which would be cumbersome.&lt;/p&gt;

&lt;p&gt;So how do you avoid violating the law?&lt;/p&gt;

&lt;p&gt;You could make a custom method in the User class called “department_name”:&lt;/p&gt;

&lt;p&gt;```
class User
  def user_info
    “#{user.name}, #{user.department_name}”
  end&lt;/p&gt;

&lt;p&gt;def department_name
    departments.first.name
  end
end
```&lt;/p&gt;

&lt;p&gt;Now the department_name is an immediate property of the user itself, satisfying the law and also making it easier to make future changes if we want to change what we use for the department’s name.&lt;/p&gt;

&lt;p&gt;One sign that is often but not always an indication of Demeter violation is chaining of dots.  For example “user.departments.first.name” had chained dots and indeed was a violation.  However, sometimes dot chaining does not mean Demeter violation for example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
def slug(string)
  string.strip.downcase.tr_s(&#39;^[a-z0-9]&#39;, &#39;-&#39;)
end
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The above complies with the Law of Demeter because each method is called on a String object.  And the law doesn’t care about the number of methods called, but the number of &lt;em&gt;types&lt;/em&gt; of methods called.&lt;/p&gt;

&lt;p&gt;For more information see &lt;a href=&quot;http://www.virtuouscode.com/2011/07/05/demeter-its-not-just-a-good-idea-its-the-law/&quot;&gt;Demeter: It’s not just a good idea. It’s the law.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Refining Searches using Ag</title>
   <link href="http://androidgrl.github.io/2017/01/03/ag/"/>
   <updated>2017-01-03T00:00:00-08:00</updated>
   <id>http://androidgrl.github.io/2017/01/03/ag</id>
   <content type="html">&lt;p&gt;I use Ag a lot to search for keywords in Rails Apps.  However sometimes a keyword is present so often that I want to refine my search.  One example of this is if I want to search for a keyword present only in test files. Ag has a useful -G flag that allows you to do this.&lt;/p&gt;

&lt;p&gt;For example say I wanted to search for the keyword “organization” in files that end in spec.rb.  I would use:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
&amp;gt; Ag organization -G spec.rb$
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The -G flag tells Ag to look for the term inside files with names containing spec.rb.  It can accept a regex which is what the $ is for.  The $ indicates that I want to search in files that end in spec.rb, not just files that have spec.rb somewhere within their names.&lt;/p&gt;

&lt;p&gt;Another example is if I am searching for a keyword that includes punctuation marks which happen to be regex characters.  For example, I was searching for “.try” and since Ag automatically treats search terms as regexes by default, it will find all terms with any character followed by try, like “retry” in addition to “.try”.&lt;/p&gt;

&lt;p&gt;Ag has a literal expression flag -Q to specify that you’re searching for a literal expression not a regex.  In order to search for “.try” you would use:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
&amp;gt; Ag -Q .try
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For more  information see &lt;a href=&quot;http://conqueringthecommandline.com/book/ack_ag&quot;&gt;Conquering the Command Line, by Mark Bates&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How to Raise and Rescue Errors in Rails</title>
   <link href="http://androidgrl.github.io/2016/08/30/rescue/"/>
   <updated>2016-08-30T00:00:00-07:00</updated>
   <id>http://androidgrl.github.io/2016/08/30/rescue</id>
   <content type="html">&lt;p&gt;Raising and rescuing errors in Rails is relatively easy.  All you need to do is make a custom error class, raise it (usually in a model) and rescue it (usually in a controller).&lt;/p&gt;

&lt;p&gt;Start by making a custom error class that inherits from StandardError.  This will give you a more descriptive error instead of raising the generic StandardError, so you can better deduce where the error came from.
 I will use a hypothetical example of an error that is raised when a User is being created.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
class UserCreateError &amp;lt; StandardError
end
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Each custom error class should have it’s own file which you can put in an app/errors directory.&lt;/p&gt;

&lt;p&gt;Here I will raise the error in a User model method.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
class User &amp;lt; ActiveRecord::Base
  def self.example_method
    raise UserCreateError
  end
end
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When the create action is called on the controller, it will call User.example_method, which will raise the error.  The error then goes back up to the controller where it is rescued.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
class UsersController &amp;lt; ApplicationController
  def create
    User.example_method
  rescue UserCreateError
    render json: &quot;Invalid User Information&quot;, status: :bad_request
  end
end
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note the indentation of the rescue is on the same column as the def.&lt;/p&gt;

&lt;p&gt;Whatever you put underneath the rescue will be run if there is an error.&lt;/p&gt;

&lt;p&gt;Here I render a custom json error message and specify an optional status code.&lt;/p&gt;

&lt;p&gt;And that’s pretty much all there is too it.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>What is initialize used for in Ruby?</title>
   <link href="http://androidgrl.github.io/2016/07/15/initialize/"/>
   <updated>2016-07-15T00:00:00-07:00</updated>
   <id>http://androidgrl.github.io/2016/07/15/initialize</id>
   <content type="html">&lt;p&gt;Does initialize need to be used all the time in a class?  No.
You only need it to set instance variables and to allow passing of arguments when instantiating a class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example one:&lt;/strong&gt; &lt;em&gt;You don’t need it to instantiate a class&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s make a class with a single instance method and no initialize method.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
class Holiday
  def statement
    &quot;I&#39;m going to the beach&quot;
  end
end
puts Holiday.new
puts Holiday.new.statement
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If we run the code, the “puts” outputs the following, and we see that Holiday.new instantiates an object just fine and we can call the method statement on it:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
#&amp;lt;Holiday:0x007fe194093d00&amp;gt;
I&#39;m going to the beach
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example two:&lt;/strong&gt; &lt;em&gt;You don’t need it to use attr_accessors&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s make a class with an attr_accessor and no initialize method.  We instantiate two different holiday objects, and then using the attr_accessors set a separate location attribute for each.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
class Holiday
  attr_accessor :location
  def statement
    &quot;I&#39;m going on holiday to #{location}&quot;
  end
end
holiday1 = Holiday.new
holiday2 = Holiday.new
holiday1.location = &quot;Europe&quot;
holiday2.location = &quot;Hawaii&quot;
puts holiday1.statement
puts holiday2.statement
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The output shows that the attr_accessors still work without the initialize method.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
I&#39;m going on holiday to Europe
I&#39;m going on holiday to Hawaii
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example three:&lt;/strong&gt; &lt;em&gt;You DO need it to set instance variables&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The following is a class that tries to set an instance variable @word to equal “whatever”.
The output is nothing, because instance variables need to be put inside an initialize method.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
class Random
  @word = &quot;whatever&quot;
  def whatever
    @word
  end
end
puts Random.new.whatever
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The following will correctly result in an output of “whatever”.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
class Random
  def initialize
    @word = &quot;whatever&quot;
  end
  def whatever
    @word
  end
end
puts Random.new.whatever
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example four:&lt;/strong&gt; &lt;em&gt;You DO need it to allow arguments to be passed in when instantiating a Class&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The following code tries to pass in a string argument into the “new” method.&lt;/p&gt;

&lt;p&gt;```
class Random
end&lt;/p&gt;

&lt;p&gt;puts Random.new(“whatever”)
```&lt;/p&gt;

&lt;p&gt;This results in an error.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
new.rb:35:in `initialize&#39;: no implicit conversion of String into Integer (TypeError)
        from new.rb:35:in `new&#39;
        from new.rb:35:in `&amp;lt;main&amp;gt;&#39;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You need to specify that there are arguments in the initialize method for “new” method to be able to take any.
However, you don’t have to actually do anything with the arguments in the initialize method.&lt;/p&gt;

&lt;p&gt;```
class Random
  def initialize(word)
  end
end&lt;/p&gt;

&lt;p&gt;puts Random.new(“whatever”)
```&lt;/p&gt;

&lt;p&gt;This will result in the object being successfully instantiated, as shown in the output below.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
#&amp;lt;Random:0x007fbbb9170cd8&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you wanted to actually have access to the attribute then you would have to set it as an instance variable inside the initialize method, and set an attr_reader.&lt;/p&gt;

&lt;p&gt;```
class Random
  attr_reader :word
  def initialize(word)
    @word = word
  end
end&lt;/p&gt;

&lt;p&gt;puts Random.new(“whatever”).word
```&lt;/p&gt;

&lt;p&gt;Which will output “whatever”.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>The difference between Rspec spies, doubles and instance_doubles</title>
   <link href="http://androidgrl.github.io/2016/07/13/double/"/>
   <updated>2016-07-13T00:00:00-07:00</updated>
   <id>http://androidgrl.github.io/2016/07/13/double</id>
   <content type="html">&lt;p&gt;Throughout the code base of our Rails app at work, we have many Rspec tests that use spies, doubles and instance_doubles.  I found most of the information on the web about them to be very theoretical and not practical.  My coworker then explained it to me very clearly as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;All three terms belong under an umbrella term called “doubles”. In other words, a spy is a type of double, and so is an instance_double.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Spies, doubles, and instance_doubles are doubles that increase in their power of specificity in that order. So a double is more specific than a spy and an instance_double is more specific than a double.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The best way to demonstrate how they work is to pry into an rspec file.  This assumes that you are already familiar with setting up an Rspec test file in a Rails app. In the Rspec file, inside an “it” block place a binding.pry.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
    it &quot;demonstrates doubles&quot; do
      binding.pry
    end
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the pry session, define a spy, then try to call undefined methods on it.  It will keep returning a double.  So spies, are just generic doubles that will keep giving you a double no matter what methods you call on them.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
pry(#&amp;lt;RSpec&amp;gt;)&amp;gt; s=spy
=&amp;gt; #&amp;lt;Double (anonymous)&amp;gt;
pry(#&amp;lt;RSpec&amp;gt;)&amp;gt; s.what?
=&amp;gt; #&amp;lt;Double (anonymous)&amp;gt;
pry(#&amp;lt;RSpec&amp;gt;)&amp;gt; s.anything?
=&amp;gt; #&amp;lt;Double (anonymous)&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Moving towards more specificity, define a double.  Below a double is defined with a method called name that returns the string “androidgrl”.  When we call name on the double it returns “androidgrl”.  What happens when we call an undefined method like “age” on the double?  It gives us an error unlike with spies.  So with doubles, you have to define methods that can be called on them.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
pry(#&amp;lt;RSpec&amp;gt;)&amp;gt; d=double(name: &quot;androidgrl&quot;)
=&amp;gt; #&amp;lt;Double (anonymous)&amp;gt;
pry(#&amp;lt;RSpec&amp;gt;)&amp;gt; d.name
=&amp;gt; &quot;androidgrl&quot;
pry(#&amp;lt;RSpec&amp;gt;)&amp;gt; d.age
RSpec::Mocks::MockExpectationError: #&amp;lt;Double (anonymous)&amp;gt; received unexpected message :age with (no args)
from /opt/active/acl_api/current/vendor/bundle/ruby/2.1.0/gems/rspec-support-3.3.0/lib/rspec/support.rb:86:in `block in &amp;lt;module:Support&amp;gt;&#39;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And finally, we have the most specific type of double, instance_doubles.  Here we have to specify which Class we’re defining the double for.  This has to be an actual class that exists either in your application or inherited through Ruby.  Here we’re stubbing out the “count” method on the Array class to always return 3.  Notice that when we try to define a method on Array that doesn’t actually exist we get an error.  Also when we try to make an instance double for a Class that doesn’t exist we get an error.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
pry(#&amp;lt;RSpec&amp;gt;)&amp;gt; i=instance_double(Array, count: 3)
=&amp;gt; #&amp;lt;InstanceDouble(Array) (anonymous)&amp;gt;
pry(#&amp;lt;RSpec&amp;gt;)&amp;gt; i.count
=&amp;gt; 3
pry(#&amp;lt;RSpec&amp;gt;)&amp;gt; i=instance_double(Array, whatever: &quot;?&quot;)
RSpec::Mocks::MockExpectationError: the Array class does not implement the instance method: whatever
from /opt/active/acl_api/current/vendor/bundle/ruby/2.1.0/gems/rspec-support-3.3.0/lib/rspec/support.rb:86:in `block in &amp;lt;module:Support&amp;gt;&#39;
&lt;/code&gt;
&lt;code&gt;
pry(#&amp;lt;RSpeci=instance_double(FakeClass, fake_method: &quot;fake&quot;)
NameError: uninitialized constant TM::FakeClass
from (pry):14:in `block (2 levels) in &amp;lt;module:TM&amp;gt;&#39;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In summary:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Instance_doubles have to be defined on Classes that actually exist in your code and you can only stub methods that actually exist.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Doubles can have any methods called on them as long as you define them in the double.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Spies don’t need to have anything defined on them and will always return a double.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>3D Printed Portrait-Business Cards Tutorial</title>
   <link href="http://androidgrl.github.io/2015/10/10/card/"/>
   <updated>2015-10-10T00:00:00-07:00</updated>
   <id>http://androidgrl.github.io/2015/10/10/card</id>
   <content type="html">&lt;p&gt;Have business cards that truly stand out! The next time you give your business card to someone, impress them with a 3D printed business card with your own portrait on it!  This tutorial will show you how to use Tinkercad, a free online 3D design tool.  Tinkercad is easy-to-use and is web-based, so there is no need to download anything.  This design takes only 15 minutes to create.&lt;/p&gt;

&lt;p&gt;I have included a video demonstrating the process below.  I suggest following along with the video, and then using the written instructions below as a reference.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=VJI_D-GGwqY&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/VJI_D-GGwqY/0.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;em&gt;Youtube tutorial&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;sign-up-for-tinkercad-and-thingiverse-accounts&quot;&gt;Sign up for Tinkercad and Thingiverse accounts:&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Sign up for a free &lt;a href=&quot;https://www.tinkercad.com/&quot;&gt;Tindercad account&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Sign up for a free &lt;a href=&quot;http://www.thingiverse.com/&quot;&gt;Thingiverse account&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;create-a-lithopane-portrait&quot;&gt;Create a lithopane portrait:&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Go to &lt;a href=&quot;http://www.thingiverse.com/thing:74322&quot;&gt;Thingiverse lithopane generator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Click on “open in customizer”&lt;/li&gt;
  &lt;li&gt;Choose the small pane size, and click “invert colors”&lt;/li&gt;
  &lt;li&gt;Choose the jpg file that you want to use for your portrait&lt;/li&gt;
  &lt;li&gt;Click “create thing”
It will take a few minutes for your lithopane to be generated.  You will be able to see it by clicking on the dropdown arrow next to your avatar photo on the top right of the page, and selecting “My Things”.&lt;/li&gt;
  &lt;li&gt;When it’s ready, download the .stl file by clicking on “Thing Files” and selecting the file.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;create-the-business-card-base&quot;&gt;Create the business card base:&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Sign into Tinkercad and click on “Create New Design”&lt;/li&gt;
  &lt;li&gt;Under shape generators select geometric option, and select the red box.  Drag it to the workplane and click to deposit.&lt;/li&gt;
  &lt;li&gt;I recommend using a mouse- it’s much easier than using the touchpad.  To zoom in and out, turn the scroll wheel.  To rotate your view around the model, right click and drag.&lt;/li&gt;
  &lt;li&gt;The standard size of business cards in the US is 89 X 51mm.  We’ll use the ruler tool to manually enter the dimensions of the card.  On the toolbar on the top, select the grid, then select the ruler.  Drag it next to the red box and click. Now click on the red box, the dimensions will show up.  Click on the width and enter 89.00, click on the height and enter 51.00, finally click on the thickness and enter 1.00.&lt;/li&gt;
  &lt;li&gt;Another shape manipulation feature is the black arrow you see on the top of the box. Click and drag it up to lift the card off of the workplane.  To drop the card back onto the workplane, just press “d”.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;create-the-business-card-text&quot;&gt;Create the business card text:&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Under the Shape Generator’s menu, select Tinkercad, and click on the “TEXT” icon.  Drag it to the workplane and click to deposit.
You’ll notice an Inspector window will automatically appear on the right.  In the “Text” field enter your name.&lt;/li&gt;
  &lt;li&gt;Select the ruler tool again, and manually enter the following dimensions for your name:  5mm high, 40mm wide, 0.5mm thick.&lt;/li&gt;
  &lt;li&gt;Now we’re going to drop the text on top of the card by creating a new workplane on top of the card.  Select the workplane tool.  Click anywhere on the top surface of the card.  This creates a new orange workplane.  Drag the text to be on top of the card.  Then type “d” and the text gets “dropped” on top of the new workplane.  We don’t need the new workplane anymore so to get rid of it, select the workplane tool again and click anywhere outside the orange workplane.&lt;/li&gt;
  &lt;li&gt;To make the twitter handle, phone number, title and email fields, click on your name text, then copy and paste from the edit menu, 4 times.  Drag these texts onto the card.
To change the text, click on it and edit it with the Inspector that pops up.
Make any adjustments you want to the width of the text by manually entering it using the ruler.  Line them up on the left side of the card.  The horizontal placement doesn’t have to be exact now, but you’ll want the vertical spacing between the lines of text to be exactly how you want.  For fine adjustments, change the snap grid setting on the bottom right corner to 0.1mm.&lt;/li&gt;
  &lt;li&gt;To horizontally align, shift click on all lines of text, and then select “Adjust” from the toolbar and select “Align”.  This will place an align tool on the card.  Click on the bottom right dot, and your text will be aligned to the right.
Finally group all the text and the card base together by clicking and dragging to draw a square around the card.  Select “Group” on the toolbar.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;add-the-lithopane-portrait&quot;&gt;Add the lithopane portrait:&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Under “Import” choose your .stl file that you downloaded from Thingiverse.  Click on “Import”.  It takes a minute or two to upload.
Adjust it to the size you want by clicking and dragging on one of the small white squares on the corners.&lt;/li&gt;
  &lt;li&gt;Next we need to get rid of the raised edges, and the top loop.  Under “Letters” select the letter “I” and drag it onto the workplane.  Make 3 more copies.  You can use the copy and edit from the Edit menu, or you can just use the keyboard shortcuts cmd+c for copy and cmd+v for paste.  Make each “I’ big enough to cover each raised edge.  The top one needs to be thick enough to cover the loop.  You don’t have to be exact, the point is to just cover the edges.&lt;/li&gt;
  &lt;li&gt;Next, shift click on all 4 of them, and in the Inspector box on the top right, select “Hole”.
Draw a box around it and select “Group”.  This will remove any material where you have put the holes.&lt;/li&gt;
  &lt;li&gt;Finally, drag the lithopane onto the card.
Draw a box around the whole card and select “Group”.&lt;/li&gt;
  &lt;li&gt;That’s it!  You can download the .stl file to be 3D printed by selecting the ”Design” menu and selecting “Download for 3D printing”.&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>How to add custom text to a 3D model</title>
   <link href="http://androidgrl.github.io/2015/08/07/text/"/>
   <updated>2015-08-07T00:00:00-07:00</updated>
   <id>http://androidgrl.github.io/2015/08/07/text</id>
   <content type="html">&lt;p&gt;This is a tutorial on how to add custom text to a 3D model, using Tinkercad’s free easy-to-use web-based 3D modeling tool.  This is great for adding personal messages and names to your prints!  In this tutorial I will add custom text to a trophy downloaded from Thingiverse.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./public/trophy.jpg&quot; alt=&quot;Image of Trophy with Printed Text&quot; /&gt;
&lt;em&gt;Pictured here is a trophy with custom text added&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Since it is much easier to demonstrate how to do this with a video, I have made a short
7 minute &lt;a href=&quot;https://www.youtube.com/watch?v=hfQt0NmeYvU&quot;&gt;Youtube video&lt;/a&gt; which demonstrates:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;How to download the file from Thingiverse.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How to remove the pre-existing text from the model using Tinkercad.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How to add your own custom text.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>How to use a Kinect to take a 3D scan and Print It</title>
   <link href="http://androidgrl.github.io/2015/07/30/kinect/"/>
   <updated>2015-07-30T00:00:00-07:00</updated>
   <id>http://androidgrl.github.io/2015/07/30/kinect</id>
   <content type="html">&lt;p&gt;This is a tutorial on how to use a Kinect to take a 3D scan and print it on a Lulzbot printer.
Follow these instructions and you will be able to make a 3D print of a person!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./public/rick.jpg&quot; alt=&quot;Image of 3D print of Rick Bacci&quot; /&gt;
&lt;em&gt;Pictured here is a model of my friend Rick Bacci&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Download Skanect free software from &lt;a href=&quot;http://skanect.occipital.com/&quot;&gt;Skanect Occipital&lt;/a&gt; note this free version will only allow you to save a low resolution of your scan.  For high resolution you will have to buy the software (cost $130).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Plug in the Kinect to your computer before opening the Skanect software&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open Skanect&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Watch my &lt;a href=&quot;https://www.youtube.com/watch?v=8Nm2ufFYNBI&quot;&gt;Youtube video&lt;/a&gt; which demonstrates: how to make a scan of a person, how to export it as an .stl file, and how to import the file to slic3r.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once it’s imported to slic3r, follow the instructions below for how to make a print on a lulzbot Taz 4.  Or, proceed with your usual way of making 3D prints! &lt;script src=&quot;https://gist.github.com/0361b0f2b917a1c322f3.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>Impostor Phenomenon in Software Development</title>
   <link href="http://androidgrl.github.io/2015/06/30/impostor/"/>
   <updated>2015-06-30T00:00:00-07:00</updated>
   <id>http://androidgrl.github.io/2015/06/30/impostor</id>
   <content type="html">&lt;p&gt;This is a lightning talk that I did on the Impostor Phenomenon in Software Development.  It is a very common phenomenon among high achievers especially in open source software.  Covered in this talk is results from a survey at Turing School of Software &amp;amp; Design, and 3 steps on how to deal with it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=fN_-os5-LMc&quot;&gt;&lt;img src=&quot;./public/screenshot.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Day in the Life of Jamie Kawahara</title>
   <link href="http://androidgrl.github.io/2015/06/24/day/"/>
   <updated>2015-06-24T00:00:00-07:00</updated>
   <id>http://androidgrl.github.io/2015/06/24/day</id>
   <content type="html">&lt;p&gt;This is an article for Built in Colorado that I wrote that follows a day in my life as a student at Turing School of Software &amp;amp; Design.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./public/day.png&quot; alt=&quot;Screenshot&quot; /&gt;(http://www.builtincolorado.com/2015/07/29/dev-school-right-you-here-what-average-day-really-looks)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.builtincolorado.com/2015/07/29/dev-school-right-you-here-what-average-day-really-looks&quot;&gt;Click here to read full article&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 

</feed>
