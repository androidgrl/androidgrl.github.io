<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Androidgrl's Blog</title>
 <link href="http://androidgrl.github.io/atom.xml" rel="self"/>
 <link href="http://androidgrl.github.io/"/>
 <updated>2016-07-15T16:27:33-05:00</updated>
 <id>http://androidgrl.github.io</id>
 <author>
   <name>Jamie Kawahara</name>
   <email>kawaharajamie@gmail.com</email>
 </author>

 
 <entry>
   <title>What is initialize used for in Ruby?</title>
   <link href="http://androidgrl.github.io/2016/07/15/initialize/"/>
   <updated>2016-07-15T00:00:00-05:00</updated>
   <id>http://androidgrl.github.io/2016/07/15/initialize</id>
   <content type="html">&lt;p&gt;Does initialize need to be used all the time in a class?  No.
You only need it to set instance variables and to allow passing of arguments when instantiating a class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example one:&lt;/strong&gt; &lt;em&gt;You don’t need it to instantiate a class&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s make a class with a single instance method and no initialize method.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Holiday
  def statement
    &quot;I&#39;m going to the beach&quot;
  end
end
puts Holiday.new
puts Holiday.new.statement
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If we run the code, the “puts” outputs the following, and we see that Holiday.new instantiates an object just fine and we can call the method statement on it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#&amp;lt;Holiday:0x007fe194093d00&amp;gt;
I&#39;m going to the beach
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Example two:&lt;/strong&gt; &lt;em&gt;You don’t need it to use attr_accessors&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s make a class with an attr_accessor and no initialize method.  We instantiate two different holiday objects, and then using the attr_accessors set a separate location attribute for each.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Holiday
  attr_accessor :location
  def statement
    &quot;I&#39;m going on holiday to #{location}&quot;
  end
end
holiday1 = Holiday.new
holiday2 = Holiday.new
holiday1.location = &quot;Europe&quot;
holiday2.location = &quot;Hawaii&quot;
puts holiday1.statement
puts holiday2.statement
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The output shows that the attr_accessors still work without the initialize method.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I&#39;m going on holiday to Europe
I&#39;m going on holiday to Hawaii
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Example three:&lt;/strong&gt; &lt;em&gt;You DO need it to set instance variables&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The following is a class that tries to set an instance variable @word to equal “whatever”.
The output is nothing, because instance variables need to be put inside an initialize method.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Random
  @word = &quot;whatever&quot;
  def whatever
    @word
  end
end
puts Random.new.whatever
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The following will correctly result in an output of “whatever”.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Random
  def initialize
    @word = &quot;whatever&quot;
  end
  def whatever
    @word
  end
end
puts Random.new.whatever
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Example four:&lt;/strong&gt; &lt;em&gt;You DO need it to allow arguments to be passed in when instantiating a Class&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The following code tries to pass in a string argument into the “new” method.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Random
end

puts Random.new(&quot;whatever&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This results in an error.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;new.rb:35:in `initialize&#39;: no implicit conversion of String into Integer (TypeError)
        from new.rb:35:in `new&#39;
        from new.rb:35:in `&amp;lt;main&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You need to specify that there are arguments in the initialize method for “new” method to be able to take any.
However, you don’t have to actually do anything with the arguments in the initialize method.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Random
  def initialize(word)
  end
end

puts Random.new(&quot;whatever&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will result in the object being successfully instantiated, as shown in the output below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#&amp;lt;Random:0x007fbbb9170cd8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you wanted actually have access to the attribute then you would have to set it as an instance variable inside the initialize method, and set an attr_reader.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Random
  attr_reader :word
  def initialize(word)
    @word = word
  end
end

puts Random.new(&quot;whatever&quot;).word
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Which will output “whatever”.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>The difference between Rspec spies, doubles and instance_doubles</title>
   <link href="http://androidgrl.github.io/2016/07/13/double/"/>
   <updated>2016-07-13T00:00:00-05:00</updated>
   <id>http://androidgrl.github.io/2016/07/13/double</id>
   <content type="html">&lt;p&gt;Throughout the code base of our Rails app at work, we have many Rspec tests that use spies, doubles and instance_doubles.  I found most of the information on the web about them to be very theoretical and not practical.  My coworker then explained it to me very clearly as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;All three terms belong under an umbrella term called “doubles”. In other words, a spy is a type of double, and so is an instance_double.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Spies, doubles, and instance_doubles are doubles that increase in their power of specificity in that order. So a double is more specific than a spy and an instance_double is more specific than a double.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The best way to demonstrate how they work is to pry into an rspec file.  This assumes that you are already familiar with setting up an Rspec test file in a Rails app. In the Rspec file, inside an “it” block place a binding.pry.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    it &quot;demonstrates doubles&quot; do
      binding.pry
    end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the pry session, define a spy, then try to call undefined methods on it.  It will keep returning a double.  So spies, are just generic doubles that will keep giving you a double no matter what methods you call on them.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pry(#&amp;lt;RSpec&amp;gt;)&amp;gt; s=spy
=&amp;gt; #&amp;lt;Double (anonymous)&amp;gt;
pry(#&amp;lt;RSpec&amp;gt;)&amp;gt; s.what?
=&amp;gt; #&amp;lt;Double (anonymous)&amp;gt;
pry(#&amp;lt;RSpec&amp;gt;)&amp;gt; s.anything?
=&amp;gt; #&amp;lt;Double (anonymous)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Moving towards more specificity, define a double.  Below a double is defined with a method called name that returns the string “androidgrl”.  When we call name on the double it returns “androidgrl”.  What happens when we call an undefined method like “age” on the double?  It gives us an error unlike with spies.  So with doubles, you have to define methods that can be called on them.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pry(#&amp;lt;RSpec&amp;gt;)&amp;gt; d=double(name: &quot;androidgrl&quot;)
=&amp;gt; #&amp;lt;Double (anonymous)&amp;gt;
pry(#&amp;lt;RSpec&amp;gt;)&amp;gt; d.name
=&amp;gt; &quot;androidgrl&quot;
pry(#&amp;lt;RSpec&amp;gt;)&amp;gt; d.age
RSpec::Mocks::MockExpectationError: #&amp;lt;Double (anonymous)&amp;gt; received unexpected message :age with (no args)
from /opt/active/acl_api/current/vendor/bundle/ruby/2.1.0/gems/rspec-support-3.3.0/lib/rspec/support.rb:86:in `block in &amp;lt;module:Support&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And finally, we have the most specific type of double, instance_doubles.  Here we have to specify which Class we’re defining the double for.  This has to be an actual class that exists either in your application or inherited through Ruby.  Here we’re stubbing out the “count” method on the Array class to always return 3.  Notice that when we try to define a method on Array that doesn’t actually exist we get an error.  Also when we try to make an instance double for a Class that doesn’t exist we get an error.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pry(#&amp;lt;RSpec&amp;gt;)&amp;gt; i=instance_double(Array, count: 3)
=&amp;gt; #&amp;lt;InstanceDouble(Array) (anonymous)&amp;gt;
pry(#&amp;lt;RSpec&amp;gt;)&amp;gt; i.count
=&amp;gt; 3
pry(#&amp;lt;RSpec&amp;gt;)&amp;gt; i=instance_double(Array, whatever: &quot;?&quot;)
RSpec::Mocks::MockExpectationError: the Array class does not implement the instance method: whatever
from /opt/active/acl_api/current/vendor/bundle/ruby/2.1.0/gems/rspec-support-3.3.0/lib/rspec/support.rb:86:in `block in &amp;lt;module:Support&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pry(#&amp;lt;RSpeci=instance_double(FakeClass, fake_method: &quot;fake&quot;)
NameError: uninitialized constant TM::FakeClass
from (pry):14:in `block (2 levels) in &amp;lt;module:TM&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In summary:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Instance_doubles have to be defined on Classes that actually exist in your code and you can only stub methods that actually exist.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Doubles can have any methods called on them as long as you define them in the double.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Spies don’t need to have anything defined on them and will always return a double.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>3D Printed Portrait-Business Cards Tutorial</title>
   <link href="http://androidgrl.github.io/2015/10/10/card/"/>
   <updated>2015-10-10T00:00:00-05:00</updated>
   <id>http://androidgrl.github.io/2015/10/10/card</id>
   <content type="html">&lt;p&gt;Have business cards that truly stand out! The next time you give your business card to someone, impress them with a 3D printed business card with your own portrait on it!  This tutorial will show you how to use Tinkercad, a free online 3D design tool.  Tinkercad is easy-to-use and is web-based, so there is no need to download anything.  This design takes only 15 minutes to create.&lt;/p&gt;

&lt;p&gt;I have included a video demonstrating the process below.  I suggest following along with the video, and then using the written instructions below as a reference.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=VJI_D-GGwqY&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/VJI_D-GGwqY/0.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;em&gt;Youtube tutorial&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;##Sign up for Tinkercad and Thingiverse accounts:
1.  Sign up for a free &lt;a href=&quot;https://www.tinkercad.com/&quot;&gt;Tindercad account&lt;/a&gt;
2.  Sign up for a free &lt;a href=&quot;http://www.thingiverse.com/&quot;&gt;Thingiverse account&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;##Create a lithopane portrait:
1.  Go to &lt;a href=&quot;http://www.thingiverse.com/thing:74322&quot;&gt;Thingiverse lithopane generator&lt;/a&gt;
2.  Click on “open in customizer”
3.  Choose the small pane size, and click “invert colors”
4.  Choose the jpg file that you want to use for your portrait
5.  Click “create thing”
It will take a few minutes for your lithopane to be generated.  You will be able to see it by clicking on the dropdown arrow next to your avatar photo on the top right of the page, and selecting “My Things”.
6. When it’s ready, download the .stl file by clicking on “Thing Files” and selecting the file.&lt;/p&gt;

&lt;p&gt;##Create the business card base:
1.  Sign into Tinkercad and click on “Create New Design”
2.  Under shape generators select geometric option, and select the red box.  Drag it to the workplane and click to deposit.
3.  I recommend using a mouse- it’s much easier than using the touchpad.  To zoom in and out, turn the scroll wheel.  To rotate your view around the model, right click and drag.
4.  The standard size of business cards in the US is 89 X 51mm.  We’ll use the ruler tool to manually enter the dimensions of the card.  On the toolbar on the top, select the grid, then select the ruler.  Drag it next to the red box and click. Now click on the red box, the dimensions will show up.  Click on the width and enter 89.00, click on the height and enter 51.00, finally click on the thickness and enter 1.00.
5. Another shape manipulation feature is the black arrow you see on the top of the box. Click and drag it up to lift the card off of the workplane.  To drop the card back onto the workplane, just press “d”.&lt;/p&gt;

&lt;p&gt;##Create the business card text:
1.  Under the Shape Generator’s menu, select Tinkercad, and click on the “TEXT” icon.  Drag it to the workplane and click to deposit.
You’ll notice an Inspector window will automatically appear on the right.  In the “Text” field enter your name.
2.  Select the ruler tool again, and manually enter the following dimensions for your name:  5mm high, 40mm wide, 0.5mm thick.
3.  Now we’re going to drop the text on top of the card by creating a new workplane on top of the card.  Select the workplane tool.  Click anywhere on the top surface of the card.  This creates a new orange workplane.  Drag the text to be on top of the card.  Then type “d” and the text gets “dropped” on top of the new workplane.  We don’t need the new workplane anymore so to get rid of it, select the workplane tool again and click anywhere outside the orange workplane.
4.  To make the twitter handle, phone number, title and email fields, click on your name text, then copy and paste from the edit menu, 4 times.  Drag these texts onto the card.
To change the text, click on it and edit it with the Inspector that pops up.
Make any adjustments you want to the width of the text by manually entering it using the ruler.  Line them up on the left side of the card.  The horizontal placement doesn’t have to be exact now, but you’ll want the vertical spacing between the lines of text to be exactly how you want.  For fine adjustments, change the snap grid setting on the bottom right corner to 0.1mm.
5.  To horizontally align, shift click on all lines of text, and then select “Adjust” from the toolbar and select “Align”.  This will place an align tool on the card.  Click on the bottom right dot, and your text will be aligned to the right.
Finally group all the text and the card base together by clicking and dragging to draw a square around the card.  Select “Group” on the toolbar.&lt;/p&gt;

&lt;p&gt;##Add the lithopane portrait:
1.  Under “Import” choose your .stl file that you downloaded from Thingiverse.  Click on “Import”.  It takes a minute or two to upload.
Adjust it to the size you want by clicking and dragging on one of the small white squares on the corners.
2.  Next we need to get rid of the raised edges, and the top loop.  Under “Letters” select the letter “I” and drag it onto the workplane.  Make 3 more copies.  You can use the copy and edit from the Edit menu, or you can just use the keyboard shortcuts cmd+c for copy and cmd+v for paste.  Make each “I’ big enough to cover each raised edge.  The top one needs to be thick enough to cover the loop.  You don’t have to be exact, the point is to just cover the edges.
3.  Next, shift click on all 4 of them, and in the Inspector box on the top right, select “Hole”.
Draw a box around it and select “Group”.  This will remove any material where you have put the holes.
4.  Finally, drag the lithopane onto the card.
Draw a box around the whole card and select “Group”.
5.  That’s it!  You can download the .stl file to be 3D printed by selecting the ”Design” menu and selecting “Download for 3D printing”.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How to add custom text to a 3D model</title>
   <link href="http://androidgrl.github.io/2015/08/07/text/"/>
   <updated>2015-08-07T00:00:00-05:00</updated>
   <id>http://androidgrl.github.io/2015/08/07/text</id>
   <content type="html">&lt;p&gt;This is a tutorial on how to add custom text to a 3D model, using Tinkercad’s free easy-to-use web-based 3D modeling tool.  This is great for adding personal messages and names to your prints!  In this tutorial I will add custom text to a trophy downloaded from Thingiverse.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./public/trophy.jpg&quot; alt=&quot;Image of Trophy with Printed Text&quot; /&gt;
&lt;em&gt;Pictured here is a trophy with custom text added&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Since it is much easier to demonstrate how to do this with a video, I have made a short
7 minute &lt;a href=&quot;https://www.youtube.com/watch?v=hfQt0NmeYvU&quot;&gt;Youtube video&lt;/a&gt; which demonstrates:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;How to download the file from Thingiverse.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How to remove the pre-existing text from the model using Tinkercad.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How to add your own custom text.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>How to use a Kinect to take a 3D scan and Print It</title>
   <link href="http://androidgrl.github.io/2015/07/30/kinect/"/>
   <updated>2015-07-30T00:00:00-05:00</updated>
   <id>http://androidgrl.github.io/2015/07/30/kinect</id>
   <content type="html">&lt;p&gt;This is a tutorial on how to use a Kinect to take a 3D scan and print it on a Lulzbot printer.
Follow these instructions and you will be able to make a 3D print of a person!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./public/rick.jpg&quot; alt=&quot;Image of 3D print of Rick Bacci&quot; /&gt;
&lt;em&gt;Pictured here is a model of my friend Rick Bacci&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Download Skanect free software from &lt;a href=&quot;http://skanect.occipital.com/&quot;&gt;Skanect Occipital&lt;/a&gt; note this free version will only allow you to save a low resolution of your scan.  For high resolution you will have to buy the software (cost $130).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Plug in the Kinect to your computer before opening the Skanect software&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open Skanect&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Watch my &lt;a href=&quot;https://www.youtube.com/watch?v=8Nm2ufFYNBI&quot;&gt;Youtube video&lt;/a&gt; which demonstrates: how to make a scan of a person, how to export it as an .stl file, and how to import the file to slic3r.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once it’s imported to slic3r, follow the instructions below for how to make a print on a lulzbot Taz 4.  Or, proceed with your usual way of making 3D prints! &lt;noscript&gt;&amp;lt;pre&amp;gt;400: Invalid request&lt;/noscript&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;lt;/pre&amp;gt;&amp;lt;/noscript&amp;gt;&lt;script src=&quot;https://gist.github.com/0361b0f2b917a1c322f3.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Impostor Phenomenon in Software Development</title>
   <link href="http://androidgrl.github.io/2015/06/30/impostor/"/>
   <updated>2015-06-30T00:00:00-05:00</updated>
   <id>http://androidgrl.github.io/2015/06/30/impostor</id>
   <content type="html">&lt;p&gt;This is a lightning talk that I did on the Impostor Phenomenon in Software Development.  It is a very common phenomenon among high achievers especially in open source software.  Covered in this talk is results from a survey at Turing School of Software &amp;amp; Design, and 3 steps on how to deal with it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=fN_-os5-LMc&quot;&gt;&lt;img src=&quot;./public/screenshot.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Day in the Life of Jamie Kawahara</title>
   <link href="http://androidgrl.github.io/2015/06/24/day/"/>
   <updated>2015-06-24T00:00:00-05:00</updated>
   <id>http://androidgrl.github.io/2015/06/24/day</id>
   <content type="html">&lt;p&gt;This is an article for Built in Colorado that I wrote that follows a day in my life as a student at Turing School of Software &amp;amp; Design.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.builtincolorado.com/2015/07/29/dev-school-right-you-here-what-average-day-really-looks&quot;&gt;&lt;img src=&quot;./public/day.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.builtincolorado.com/2015/07/29/dev-school-right-you-here-what-average-day-really-looks&quot;&gt;Click here to read full article&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 

</feed>
